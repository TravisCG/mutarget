<?php

/**
 *
 * Implements hook_help
 * Display help and module information
 */
function mutarget_help($path, $arg) {
  switch ($path) {
    case "admin/help#mutarget":
      return t("Mutarget webservice");
      break;
  }
}

/**
 * Implements hook_menu
 * Mutarget will be in the main menu
 */
function mutarget_menu() {
  $items["MuTarget"] = array(
    'title' => 'Mutarget',
    'page callback' => 'mutarget_inputform',
    'page arguments' => array('None'),
    'access callback' => TRUE,
    'expanded' => TRUE,
  );

  $items["MuTarget/Genotype"] = array(
    'title' => 'Genotype',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('genotype_form'),
    'access callback' => TRUE,
  );

  $items["MuTarget/Target"] = array(
    'title' => 'Target',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('target_form'),
    'access callback' => TRUE,
  );

  $items["MuTarget/autocomplete"] = array(
    'title' => t('Autocomplete menu'),
    'page callback' => 'gene_autocomplete',
    'access callback' => TRUE,
    'access argument' => array('access content',),
    'type' => MENU_CALLBACK,
  );

  $items["MuTarget/progress/%"] = array(
    'title' => 'Progress bar',
    'page callback' => 'update_progress',
    'page arguments' => array(4),
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
  );

  return($items);
}

function add_header($inpgene, $mutnum, $totnum) {
  $html = "Input gene: " . $inpgene . "<br />\n";
  if ($mutnum != "") {
    $html = $html . "Number of mutated samples: " . $mutnum . "<br />\n";
    $html = $html . "Total number of samples: " . $totnum . "<br .>\n";
  }
  return $html;
}

function create_table($tmpname, $maxrow, $pmax, $minfc) {
  if (file_exists($tmpname . ".tsv") == true) {    
    $table = fopen($tmpname . ".tsv", "r");
    $html = "<table><thead><tr><th>";
    $header = fgets($table, 1024);
    $header = str_replace("\t", "</th><th>", $header);
    $html = $html . $header;
    $html = $html . "</th></tr></thead><tbody>";
    while (!feof($table) && $maxrow > 0) {
      $data = fgets($table, 1024);
      if ($data != ""){
	$fields = explode("\t", $data);
	if( ($fields[1] > log($minfc, 2) || $fields[1] < log(1.0/$minfc, 2)) && ($fields[2] < $pmax) ){
          $html = $html . "<tr><td>";
          $data = str_replace("\t", "</td><td>", $data);
          $data = str_replace("\n", "", $data);
          $html = $html . $data;
	  $html = $html . "</td></tr>\n";
          $maxrow = $maxrow - 1;
	}
      }
    }
    $html = $html . "</tbody></table>";
    $html = $html . '<a href="sites/all/modules/mutarget/download.php?name='.$tmpname.'" target="_blank">Download the entire table</a><br />';
    fclose($table);
  }
  else {
    $html = "Result table cannot be found.<br />";
  }

  return $html;
}

function add_pictures($tmpname) {
  $html = "";
  foreach( glob($tmpname . "*.png") as $pic ){
    $pic = str_replace("/tmp/MUT", "", $pic);
    $html = $html . '<img src="sites/all/modules/mutarget/showpic.php?pic=' . $pic . '" /><br />' . "\n";
  }
  return $html;
}

/**
 * Rendering the page
 */
function mutarget_inputform($formchoose) {
  $form = "";

  if ($formchoose != 'None') {
    $form = drupal_get_form($formchoose);
  } else {
    $form = 'Please choose one from our services';
  }

  return($form);
}

function change_to_mutargetdb() {
  $mutarget_db = array(
    'database' => 'mutarget',
    'username' => 'XXXX',
    'password' => 'XXXX',
    'host' => 'localhost',
    'driver' => 'mysql',
  );

  Database::addConnectionInfo('mutarget', 'default', $mutarget_db);

  db_set_active('mutarget');
}

function dbsrcfromcancer($cancer){
  // Let's start hacking
  if ($cancer == "3b"){
    $dbsrc = 2;
  } elseif ($cancer == "13" || $cancer == "14" || $cancer == "15") {
    $dbsrc = 3;
  } else {
    $dbsrc = 1;
  }

  return $dbsrc;
}

function runcmd($cmd, $progressvar) {
  $msg = '';

  $proc = popen($cmd, "r");
  while (!feof($proc)){
    $data = fgets($proc, 1025);
    $text = substr($data, 8, -1);

    if (stripos($data, 'MESSAGE:') !== FALSE) {
      $myvar = array('msg'     => "",
                     'percent' => substr($text, 0, -1));

      variable_set($progressvar, $myvar);
    }

    if (stripos($data, 'WARNING:') !== FALSE){
      $msg = $msg . $text . "<br/>";
    }
  }

  pclose($proc);
  variable_del($progressvar);

  return($msg);
}

/**
 * Genotype form
 */
function genotype_form($form, $form_state) {
  global $user;

  $form_state['time'] = REQUEST_TIME;

  $form['status_begin'] = array(
    '#markup' => '<div id="status_div">',
  );

  $form['genes'] = array(
    '#type' => 'textfield',
    '#title' => t('Input genes'),
    '#autocomplete_path' => 'MuTarget/autocomplete',
    '#ajax' => array(
      'callback' => 'get_mutated_samples',
      'event' => 'change',
      'wrapper' => 'samplesize',
      'method' => 'replace',
    ),
  );

  if (!empty($user->name)) {
  $form['tumtype'] = array(
    '#type' => 'select',
    '#title' => t('Tumour type'),
    '#options' => array(
      '13' => t('Acute Lymphoblastic Leukemia - TARGET'),
      '14' => t('Acute Myeloid Leukemia - TARGET'),
      '3b' => t('Breast Carcinoma - METABRIC'),
      '3'  => t('Breast Invasive Carcinoma - TCGA'),
      '12' => t('Colon Adenocarcinoma - TCGA'),
      '2'  => t('Head and Neck Squamous Cell Carcinoma - TCGA'),
      '7'  => t('Kidney Renal Clear Cell Carcinoma - TCGA'),
      '11' => t('Kidney Chromophobe - TCGA'),
      '9'  => t('Kidney Renal Papillary Cell Carcinoma - TCGA'),
      '8'  => t('Lung Adenocarcinoma - TCGA'),
      '10' => t('Lung Squamous Cell Carcinoma - TCGA'),
      '15' => t('Neuroblastoma - TARGET'),
      '1'  => t('Ovarian Serous Cystadenocarcinoma - TCGA'),
      '4'  => t('Prostate Adenocarcinoma - TCGA'),
      '5'  => t('Rectum Adenocarcinoma - TCGA'),
      '6'  => t('Skin Cutaneous Melanoma - TCGA'),
    ),
    '#default_value' => '3',
    '#ajax' => array(
      'callback' => 'get_mutated_samples',
      'event' => 'change',
      'wrapper' => 'samplesize',
      'method' => 'replace',
    ),
  );
  } else {
    $form['tumtype'] = array(
      '#type' => 'select',
      '#title' => t('Tumor type'),
      '#options' => array(
        '3b' => t('Breast Carcinoma - METABRIC'),
        '3'  => t('Breast Invasive Carcinoma - TCGA'),
      ),
      '#default_value' => '3',
      '#ajax' => array(
      'callback' => 'get_mutated_samples',
      'event' => 'change',
      'wrapper' => 'samplesize',
      'method' => 'replace',
    ),
    );
  }

  $form['mutnumber'] = array(
    '#markup' => '<div id="samplesize"><label>All|mutated samples:</label></div>',
  );

  $form['advanced'] = array(
    '#type' => 'fieldset',
    '#title' => t('Advanced options'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );

  $form['advanced']['mutations'] = array(
    '#type' => 'fieldset',
    '#title' => t('Mutation settings'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );

  $form['advanced']['mutations']['muttype'] = array(
    '#type' => 'radios',
    '#title' => t('Mutation type'),
    '#options' => array(
      '3' => t('Non-coding exon variant'),
      '6' => t('NMD transcript variant'),
      '9' => t('Non-coding'),
      '10' => t('Downstream gene'),
      '12' => t('Missense'),
      '14' => t('Intron variant'),
      '18' => t('Synonymous'),
      '26' => t('Upstream gene variant'),
      '27' => t('3\' UTR'),
    ),
    '#default_value' => '12',
    '#ajax' => array(
      'callback' => 'get_mutated_samples',
      'wrapper' => 'samplesize',
      'event' => 'change',
      'method' => 'replace',
    ),
  );

  $form['advanced']['filter'] = array(
    '#type' => 'fieldset',
    '#title' => t('Filtering options'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );

  $form['advanced']['filter']['filtertype'] = array(
    '#type' => 'radios',
    '#title' => t('Use mutation filter'),
    '#options' => array(
      'include' => t('include'),
      'exclude' => t('exclude'),
    ),
  );

  $form['advanced']['filter']['filtergene'] = array(
    '#type' => 'textfield',
    '#title' => t('patients with mutations in'),
    '#autocomplete_path' => 'MuTarget/autocomplete',
  );

  $form['advanced']['statistics'] = array(
    '#type' => 'fieldset',
    '#title' => t('Statistics'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );

  $form['advanced']['statistics']['pvalue'] = array(
    '#type' => 'textfield',
    '#title' => t('p-value cutoff'),
    '#default_value' => '0.05',
    '#size' => 4,
    '#maxlength' => 4,
  );

  $form['advanced']['statistics']['foldchange'] = array(
    '#type' => 'textfield',
    '#title' => t('Fold change cutoff'),
    '#default_value' => '1.15',
    '#size' => 4,
    '#maxlength' => 4,
  );

  $form['advanced']['output'] = array(
    '#type' => 'fieldset',
    '#title' => t('Output options'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );

  $form['advanced']['output']['table'] = array(
    '#type' => 'radios',
    '#title' => t('Generate table for'),
    '#options' => array(
      'all' => t('All significant genes'),
      'action' => t('Actionable genes only'),
      'fda' => t('FDA approvead actionable genes only'),
    ),
    '#default_value' => 'all',
  );

  $form['advanced']['output']['numtopgenes'] = array(
    '#type' => 'select',
    '#title' => t('Show plot for'),
    '#options' => array(
      '5' => t('Top 5 genes'),
      '10' => t('Top 10 genes'),
      '20' => t('Top 20 genes'),
      'all' => t('All genes'),
    ),
    '#default_value' => '5',
  );

  $form['advanced']['output']['outliers'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show outliers'),
  );

  $form['qtype'] = array(
    '#type' => 'hidden',
    '#value' => 'genotype',
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Send'),
    '#ajax' => array(
      'callback' => 'run_genotype_analysis',
      'progress' => array(
        'type' => 'bar',
	'message' => t('Calculating'),
	'url' => url('MuTarget/progress/' . $form_state['time']),
	'interval' => 10,
      ),
    ),
  );

  $form['status_end'] = array(
    '#markup' => '</div>',
  );

  return $form;
}

function run_genotype_analysis($form, $form_state){
  $tmp_name    = tempnam("", "MUT");
  $genes       = $form_state['values']['genes'];
  $muttype     = $form_state['values']['muttype'];
  $cancer      = $form_state['values']['tumtype'];
  $pvalue      = $form_state['values']['pvalue'];
  $foldchange  = $form_state['values']['foldchange'];
  $outtable    = $form_state['values']['table'];
  $numtopgenes = $form_state['values']['numtopgenes'];
  $outliers    = $form_state['values']['outliers'];
  $filtgene    = $form_state['values']['filtergene'];
  $filttype    = $form_state['values']['filtertype'];
  $response    = array();

  if($numtopgenes == "all"){
    $numtopgenes = 70000; // Maximum gene number
  }

  $dbsrc = dbsrcfromcancer($cancer);
  $cancer = (int)$cancer;
  chdir('sites/all/modules/mutarget/');
  $cmd = "./powermw onegroup $genes mut.$cancer.$dbsrc.$muttype.tsv exp.$cancer.$dbsrc.tsv $tmp_name.tsv";
  $msg = runcmd($cmd, "mutarget_progress_" . $form_state['time']);

  $html = add_header($genes, $_SESSION['mutsamplesnum'], $_SESSION['totalsamplenum']);
  if ($msg != '') {
    $html = $html . $msg;
  } else {
    $html = $html . create_table($tmp_name, $numtopgenes, $pvalue, $foldchange);
  }
  $html = $html . add_pictures($tmp_name);
  $html = $html . l(t('Back'), 'MuTarget/Genotype');
  $response[] = ajax_command_html('#status_div', $html);
  return array(
    '#type' => 'ajax',
    '#commands' => $response,
  );
}

/**
 * Ajax function to update the mutation number in div#mutnumber
 */
function get_mutated_samples($form, $form_state){
  $muttype = $form['advanced']['mutations']['muttype']['#value'];
  //$muttype = "(" . implode(",", $muttype) . ")";
  $tumtype = $form['tumtype']['#value'];
  $gene    = $form['genes']['#value'];
  $dbsrc   = dbsrcfromcancer($tumtype);
  $tumtype = (int)$tumtype;
  $all = $gene;

  change_to_mutargetdb();
  $all = db_query("select count(distinct(name)) as counted from individual where cancer_cancerid =" . $tumtype . " and datasource_datasourceid = " . $dbsrc . ";")->fetchField();
  $mutated = db_query("select count(distinct(name)) as mutated from mutation left join (cancer,genetable,muteffect,individual) on (individual_cancer_cancerid = cancerid and genetable_geneid = geneid and muteffect_effectid = effectid and individual_patientid = patientid) where effectid = " . $muttype . " and cancerid = " . $tumtype . " and genename = '" . $gene . "' and datasource_datasourceid = " . $dbsrc . ";" )->fetchField();
  $_SESSION['mutsamplesnum'] = $mutated;
  $_SESSION['totalsamplenum'] = $all;

  db_set_active();

  return '<div id="samplesize"><label>All|mutated samples:</label> ' . $all . "|" . $mutated . '</div>';
}

/**
 * Ajax function for gene autocomplete input boxes
 */
function gene_autocomplete($string) {
  $matches = array();

  change_to_mutargetdb();
  $result = db_query("select genename from genetable where genename like '" . $string . "%' order by genename limit 10");

  foreach ($result as $rec) {
    $matches[ $rec->genename ] = $rec->genename;
  }

  db_set_active();

  drupal_json_output($matches);
}

/**
 * Ajax function for progress bar
 */
function update_progress($time) {
  $progress = array(
    'message' => t('Starting execute...'),
    'percentage' => -1,
  );

  $completed = variable_get('mutarget_progress_' . $time, 0);

  if ($completed) {
    $progress['message'] = $completed['msg'];
    $progress['percentage'] = $completed['percent'];
  }

  drupal_json_output($progress);
}

/**
 * Create Target forms
 */ 
function target_form($form, $form_state){
  global $user;

  $form_state['time'] = REQUEST_TIME;

  $form['status_begin'] = array(
    '#markup' => '<div id="status_div">',
  );

  $form['gene'] = array(
    '#type' => 'textfield',
    '#title' => t('Enter gene symbol here'),
    '#autocomplete_path' => 'MuTarget/autocomplete',
  );

  if (!empty($user->name)) {
  $form['tumtype'] = array(
    '#type' => 'select',
    '#title' => t('Tumour type'),
    '#options' => array(
      '13' => t('Acute Lymphoblastic Leukemia - TARGET'),
      '14' => t('Acute Myeloid Leukemia - TARGET'),
      '3b' => t('Breast Carcinoma - METABRIC'),
      '3'  => t('Breast Invasive Carcinoma - TCGA'),
      '12' => t('Colon Adenocarcinoma - TCGA'),
      '2'  => t('Head and Neck Squamous Cell Carcinoma - TCGA'),
      '7'  => t('Kidney Renal Clear Cell Carcinoma - TCGA'),
      '11' => t('Kidney Chromophobe - TCGA'),
      '9'  => t('Kidney Renal Papillary Cell Carcinoma - TCGA'),
      '8'  => t('Lung Adenocarcinoma - TCGA'),
      '10' => t('Lung Squamous Cell Carcinoma - TCGA'),
      '15' => t('Neuroblastoma - TARGET'),
      '1'  => t('Ovarian Serous Cystadenocarcinoma - TCGA'),
      '4'  => t('Prostate Adenocarcinoma - TCGA'),
      '5'  => t('Rectum Adenocarcinoma - TCGA'),
      '6'  => t('Skin Cutaneous Melanoma - TCGA'),
    ),
    '#default_value' => '3',
  );

  } else {
    $form['tumtype'] = array(
      '#type' => 'select',
      '#title' => t('Tumour type'),
      '#options' => array(
        '3b' => t('Breast Carcinoma - METABRIC'),
	'3'  => t('Breast Invasive Carcinoma - TCGA'),
      ),
      '#default_value' => '3',
    );
  }

  $form['advanced'] = array(
    '#type' => 'fieldset',
    '#title' => t('Advanced options'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );

  $form['advanced']['filtertype'] = array(
    '#type' => 'radios',
    '#title' => t('Use mutation filter'),
    '#options' => array(
      'include' => t('include'),
      'exclude' => t('exclude'),
    ),
  );

  $form['advanced']['filtergene'] = array(
    '#type' => 'textfield',
    '#title' => t('patients with mutations in'),
    '#autocomplete_path' => 'MuTarget/autocomplete',
  );

  $form['advanced']['pvalue'] = array(
    '#type' => 'textfield',
    '#title' => t('p-value cutoff'),
    '#default_value' => '0.05',
    '#size' => 4,
    '#maxlength' => 4,
  );

  $form['advanced']['foldchange'] = array(
    '#type' => 'textfield',
    '#title' => t('Fold change cutoff'),
    '#default_value' => '1.15',
    '#size' => 4,
    '#maxlength' => 4,
  );

  $form['advanced']['prevalence'] = array(
    '#type' => 'textfield',
    '#title' => t('Mutation prevalence at least %'),
    '#default_value' => '1',
    '#size' => 4,
    '#maxlength' => 4,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Send'),
    '#ajax' => array(
      'callback' => 'run_target_analysis',
      'progress' => array(
	'type' => 'bar',
	'message' => 'Calculating...',
	'interval' => 10,
        'url' => url('MuTarget/progress/') . $form_state['time'],
      ),
    ),
  );

  $form['status_end'] = array(
    '#markup' => '</div>',
  );

  return($form);

}

function run_target_analysis($form, $form_state){
  $tmp_name = tempnam("", "MUT");
  $cancer = $form_state['values']['tumtype'];
  $muttype = "12";
  $gene = $form_state['values']['gene'];
  $pvalue = $form_state['values']['pvalue'];
  $foldchange = $form_state['values']['foldchange'];
  $mutprev = $form_state['values']['prevalence'];
  $filtgene = $form_state['values']['filtergene'];
  $filttype = $form_state['values']['filtertype'];
  $dodectree = $form_state['values']['dodectree'];
  $response = array();

  $dbsrc = dbsrcfromcancer($cancer);
  $cancer = (int)$cancer; //Remove B and other characters from the end of the cancerid
  chdir('sites/all/modules/mutarget/');
  $cmd = "./powermw onevalue $gene mut.$cancer.$dbsrc.$muttype.tsv exp.$cancer.$dbsrc.tsv $tmp_name.tsv";
  $msg = runcmd($cmd, "mutarget_progress_" . $form_state['time']);

  $html = add_header($gene, "", "");
  if ($msg != ''){
    $html = $html . $msg;
  } else {
    $html = $html . create_table($tmp_name, 5, $pvalue, $foldchange);
  }
  $html = $html . add_pictures($tmp_name);
  $html = $html . l(t('Back'), 'MuTarget/Target');

  $response[] = ajax_command_html('#status_div', $html);
  return array(
    '#type' => 'ajax',
    '#commands' => $response,
  );
}
